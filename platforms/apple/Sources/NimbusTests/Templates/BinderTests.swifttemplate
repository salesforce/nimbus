<%- includeFile("../../Nimbus/Templates/Config.swift") -%>
<%- includeFile("../../Nimbus/Templates/Utils.swift") -%>
//
// Copyright (c) 2019, Salesforce.com, inc.
// All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
//

import XCTest

@testable import Nimbus

// repetitive tests are repetitive...
// swiftlint:disable type_body_length file_length line_length
<%_
let arr0 = "[\"one\", \"two\", \"three\"]"
let arr1 = "[\"four\", \"five\", \"six\"]"
let dict0 = "[\"one\": 1, \"two\": 2, \"three\": 3]"
let dict1 = "[\"four\": 4, \"five\": 5, \"six\": 6]"
_%>
class BinderTests: XCTestCase {
    let binder = TestBinder()
<%_  for (index, arity) in arities.enumerated() { -%>
<%_     if index == 0 { _%>
    func testBindNullaryNoReturn() {
        binder.bind(BindTarget.nullaryNoReturn, as: "")
        _ = try? binder.callable?.call(args: [])
        XCTAssert(binder.target.called)
    }

    func testBindNullaryNoReturnThrows() {
        binder.bind(BindTarget.nullaryNoReturnThrows, as: "")
        XCTAssertThrowsError(try binder.callable?.call(args: []))
        XCTAssert(binder.target.called)
    }

    func testBindNullaryWithReturn() {
        binder.bind(BindTarget.nullaryWithReturn, as: "")
        let value = try? binder.callable?.call(args: []) as? String
        XCTAssert(binder.target.called)
        XCTAssertEqual(value, .some("value"))
    }

    func testBindNullaryWithNSArrayReturn() {
        binder.bind(BindTarget.nullaryWithNSArrayReturn, as: "")
        let value = try? binder.callable?.call(args: []) as? NSArray
        XCTAssert(binder.target.called)
        let isExpectedType = value is NSArray
        XCTAssertEqual(isExpectedType, true)
    }

    func testBindNullaryWithNSDictionaryReturn() {
        binder.bind(BindTarget.nullaryWithNSDictionaryReturn, as: "")
        let value = try? binder.callable?.call(args: []) as? NSDictionary
        XCTAssert(binder.target.called)
        let isExpectedType = value is NSDictionary
        XCTAssertEqual(isExpectedType, true)
    }

    func testBindNullaryWithReturnThrows() {
        binder.bind(BindTarget.nullaryWithReturnThrows, as: "")
        XCTAssertThrowsError(try binder.callable?.call(args: []))
        XCTAssert(binder.target.called)
    }
<%_      } else { _%>
    func testBind<%= arity.name.capitalizingFirstLetter() %>NoReturn() {
        binder.bind(BindTarget.<%= arity.name %>NoReturn, as: "")
        _ = try? binder.callable?.call(args: [<%= arities.takeAsString(count: index) %>])
        XCTAssert(binder.target.called)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>NoReturnThrows() {
        binder.bind(BindTarget.<%= arity.name %>NoReturnThrows, as: "")
        XCTAssertThrowsError(try binder.callable?.call(args: [<%= arities.takeAsString(count: index) %>]))
        XCTAssert(binder.target.called)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithReturn() throws {
        binder.bind(BindTarget.<%= arity.name %>WithReturn, as: "")
        let value = try binder.callable?.call(args: [<%= arities.takeAsString(count: index) %>]) as? Int
        XCTAssert(binder.target.called)
        XCTAssertEqual(value, .some(<%= arities.takeAsSum(count: index)%>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithNSArrayReturn() throws {
        binder.bind(BindTarget.<%= arity.name %>WithNSArrayReturn, as: "")
        let value = try binder.callable?.call(args: [<%= arities.takeAsString(count: index) %>]) as? NSArray
        XCTAssert(binder.target.called)
        if let value = value,
            let result = value.firstObject as? Int {
            XCTAssertEqual(result, <%= arities.takeAsSum(count: index)%>)
        } else {
            XCTFail("Value not found")
        }
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithNSDictionaryReturn() throws {
        binder.bind(BindTarget.<%= arity.name %>WithNSDictionaryReturn, as: "")
        let value = try binder.callable?.call(args: [<%= arities.takeAsString(count: index) %>]) as? NSDictionary
        XCTAssert(binder.target.called)
        if let value = value,
            let result = value["result"] as? Int {
            XCTAssertEqual(result, <%= arities.takeAsSum(count: index)%>)
        } else {
            XCTFail("Value not found")
        }
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithReturnThrows() throws {
        binder.bind(BindTarget.<%= arity.name %>WithReturnThrows, as: "")
        XCTAssertThrowsError(try binder.callable?.call(args: [<%= arities.takeAsString(count: index) %>]))
        XCTAssert(binder.target.called)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithUnaryCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithUnaryCallback, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        let callback: BindTarget.UnaryCallback = { value in
            result = value
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<%if index > 2 { %><%= arities.takeAsSum(count: index - 1) %><% } else { %><%= arities.takeAsSum(count: 1) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithUnaryCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithUnaryCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        let callback: BindTarget.UnaryCallback = { value in
            result = value
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<%if index > 2 { %><%= arities.takeAsSum(count: index - 1) %><% } else { %><%= arities.takeAsSum(count: 1) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithUnaryCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithUnaryCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        let callback: BindTarget.UnaryCallback = { value in
            result = value
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<%if index > 2 { %><%= arities.takeAsSum(count: index - 1) %><% } else { %><%= arities.takeAsSum(count: 1) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithUnaryCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithUnaryCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        let callback: BindTarget.UnaryCallback = { value in
            result = value
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<%if index > 2 { %><%= arities.takeAsSum(count: index - 1) %><% } else { %><%= arities.takeAsSum(count: 1) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithUnaryCallbackThrows() {
        binder.bind(BindTarget.<%= arity.name %>WithUnaryCallbackThrows, as: "")
        let expecter = expectation(description: "callback")
        let callback: BindTarget.UnaryCallback = { value in
            expecter.fulfill()
        }
        XCTAssertThrowsError(try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]))
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryCallback, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        let callback: BindTarget.BinaryCallback = { value1, value2 in
            result = value1 + value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<%if index > 2 { %><%= arities.takeAsSum(count: index - 1) %><% } else { %><%= arities.takeAsSum(count: 2) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        let callback: BindTarget.BinaryCallback = { value1, value2 in
            result = value1 + value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<%if index > 2 { %><%= arities.takeAsSum(count: index - 1) %><% } else { %><%= arities.takeAsSum(count: 2) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        let callback: BindTarget.BinaryCallback = { value1, value2 in
            result = value1 + value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<%if index > 2 { %><%= arities.takeAsSum(count: index - 1) %><% } else { %><%= arities.takeAsSum(count: 2) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        let callback: BindTarget.BinaryCallback = { value1, value2 in
            result = value1 + value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<%if index > 2 { %><%= arities.takeAsSum(count: index - 1) %><% } else { %><%= arities.takeAsSum(count: 2) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryPrimitiveNSArrayCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryPrimitiveNSArrayCallback, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryPrimitiveNSArrayCallback = { value1, value2 in
            result = value1
            resultArray = value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index - 1)%><% } else if index == 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index) %><% } else if index == 1 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index + 1) %><% } %>))
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryPrimitiveNSArrayCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryPrimitiveNSArrayCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryPrimitiveNSArrayCallback = { value1, value2 in
            result = value1
            resultArray = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index - 1)%><% } else if index == 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index) %><% } else if index == 1 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index + 1) %><% } %>))
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryPrimitiveNSArrayCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryPrimitiveNSArrayCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryPrimitiveNSArrayCallback = { value1, value2 in
            result = value1
            resultArray = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index - 1)%><% } else if index == 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index) %><% } else if index == 1 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index + 1) %><% } %>))
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryPrimitiveNSArrayCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryPrimitiveNSArrayCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryPrimitiveNSArrayCallback = { value1, value2 in
            result = value1
            resultArray = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index - 1)%><% } else if index == 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index) %><% } else if index == 1 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index + 1) %><% } %>))
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryPrimitiveNSDictionaryCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryPrimitiveNSDictionaryCallback, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryPrimitiveNSDictionaryCallback = { value1, value2 in
            result = value1
            resultDict = value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index - 1)%><% } else if index == 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index) %><% } else if index == 1 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index + 1) %><% } %>))
        XCTAssertEqual(resultDict, <%= dict0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryPrimitiveNSDictionaryCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryPrimitiveNSDictionaryCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryPrimitiveNSDictionaryCallback = { value1, value2 in
            result = value1
            resultDict = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index - 1)%><% } else if index == 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index) %><% } else if index == 1 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index + 1) %><% } %>))
        XCTAssertEqual(resultDict, <%= dict0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryPrimitiveNSDictionaryCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryPrimitiveNSDictionaryCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryPrimitiveNSDictionaryCallback = { value1, value2 in
            result = value1
            resultDict = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index - 1)%><% } else if index == 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index) %><% } else if index == 1 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index + 1) %><% } %>))
        XCTAssertEqual(resultDict, <%= dict0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryPrimitiveNSDictionaryCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryPrimitiveNSDictionaryCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryPrimitiveNSDictionaryCallback = { value1, value2 in
            result = value1
            resultDict = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index - 1)%><% } else if index == 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index) %><% } else if index == 1 { %><%= arities.takeAsSumOfBinaryCallback(position: .first, count: index + 1) %><% } %>))
        XCTAssertEqual(resultDict, <%= dict0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayPrimitiveCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayPrimitiveCallback, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryNSArrayPrimitiveCallback = { value1, value2 in
            resultArray = value1
            result = value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index - 1)%><% } else { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index + 1) %><% } %>))
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayPrimitiveCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayPrimitiveCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryNSArrayPrimitiveCallback = { value1, value2 in
            resultArray = value1
            result = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index - 1)%><% } else { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index + 1) %><% } %>))
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayPrimitiveCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayPrimitiveCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryNSArrayPrimitiveCallback = { value1, value2 in
            resultArray = value1
            result = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index - 1)%><% } else { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index + 1) %><% } %>))
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayPrimitiveCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayPrimitiveCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryNSArrayPrimitiveCallback = { value1, value2 in
            resultArray = value1
            result = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index - 1)%><% } else { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index + 1) %><% } %>))
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayNSArrayCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayNSArrayCallback, as: "")
        let expecter = expectation(description: "callback")
        var resultArray1: NSArray?
        var resultArray2: NSArray?
        let callback: BindTarget.BinaryNSArrayNSArrayCallback = { value1, value2 in
            resultArray1 = value1
            resultArray2 = value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultArray1, <%= arr0 %>)
        XCTAssertEqual(resultArray2, <%= arr1 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayNSArrayCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayNSArrayCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultArray1: NSArray?
        var resultArray2: NSArray?
        let callback: BindTarget.BinaryNSArrayNSArrayCallback = { value1, value2 in
            resultArray1 = value1
            resultArray2 = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultArray1, <%= arr0 %>)
        XCTAssertEqual(resultArray2, <%= arr1 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayNSArrayCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayNSArrayCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultArray1: NSArray?
        var resultArray2: NSArray?
        let callback: BindTarget.BinaryNSArrayNSArrayCallback = { value1, value2 in
            resultArray1 = value1
            resultArray2 = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultArray1, <%= arr0 %>)
        XCTAssertEqual(resultArray2, <%= arr1 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayNSArrayCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayNSArrayCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultArray1: NSArray?
        var resultArray2: NSArray?
        let callback: BindTarget.BinaryNSArrayNSArrayCallback = { value1, value2 in
            resultArray1 = value1
            resultArray2 = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultArray1, <%= arr0 %>)
        XCTAssertEqual(resultArray2, <%= arr1 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayNSDictionaryCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayNSDictionaryCallback, as: "")
        let expecter = expectation(description: "callback")
        var resultArray: NSArray?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryNSArrayNSDictionaryCallback = { value1, value2 in
            resultArray = value1
            resultDict = value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultArray, <%= arr0 %>)
        XCTAssertEqual(resultDict, <%= dict0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayNSDictionaryCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayNSDictionaryCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultArray: NSArray?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryNSArrayNSDictionaryCallback = { value1, value2 in
            resultArray = value1
            resultDict = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultArray, <%= arr0 %>)
        XCTAssertEqual(resultDict, <%= dict0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayNSDictionaryCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayNSDictionaryCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultArray: NSArray?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryNSArrayNSDictionaryCallback = { value1, value2 in
            resultArray = value1
            resultDict = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultArray, <%= arr0 %>)
        XCTAssertEqual(resultDict, <%= dict0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSArrayNSDictionaryCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSArrayNSDictionaryCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultArray: NSArray?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryNSArrayNSDictionaryCallback = { value1, value2 in
            resultArray = value1
            resultDict = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultArray, <%= arr0 %>)
        XCTAssertEqual(resultDict, <%= dict0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryPrimitiveCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryPrimitiveCallback, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryNSDictionaryPrimitiveCallback = { value1, value2 in
            resultDict = value1
            result = value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict, <%= dict0 %>)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index - 1)%><% } else { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index + 1) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryPrimitiveCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryPrimitiveCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryNSDictionaryPrimitiveCallback = { value1, value2 in
            resultDict = value1
            result = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict, <%= dict0 %>)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index - 1)%><% } else { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index + 1) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryPrimitiveCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryPrimitiveCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryNSDictionaryPrimitiveCallback = { value1, value2 in
            resultDict = value1
            result = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict, <%= dict0 %>)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index - 1)%><% } else { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index + 1) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryPrimitiveCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryPrimitiveCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var result: Int?
        var resultDict: NSDictionary?
        let callback: BindTarget.BinaryNSDictionaryPrimitiveCallback = { value1, value2 in
            resultDict = value1
            result = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict, <%= dict0 %>)
        XCTAssertEqual(result, .some(<% if index > 2 { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index - 1)%><% } else { %><%= arities.takeAsSumOfBinaryCallback(position: .second, count: index + 1) %><% } %>))
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryNSArrayCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryNSArrayCallback, as: "")
        let expecter = expectation(description: "callback")
        var resultDict: NSDictionary?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryNSDictionaryNSArrayCallback = { value1, value2 in
            resultDict = value1
            resultArray = value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict, <%= dict0 %>)
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryNSArrayCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryNSArrayCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultDict: NSDictionary?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryNSDictionaryNSArrayCallback = { value1, value2 in
            resultDict = value1
            resultArray = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict, <%= dict0 %>)
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryNSArrayCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryNSArrayCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultDict: NSDictionary?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryNSDictionaryNSArrayCallback = { value1, value2 in
            resultDict = value1
            resultArray = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict, <%= dict0 %>)
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryNSArrayCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryNSArrayCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultDict: NSDictionary?
        var resultArray: NSArray?
        let callback: BindTarget.BinaryNSDictionaryNSArrayCallback = { value1, value2 in
            resultDict = value1
            resultArray = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict, <%= dict0 %>)
        XCTAssertEqual(resultArray, <%= arr0 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryNSDictionaryCallback() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryNSDictionaryCallback, as: "")
        let expecter = expectation(description: "callback")
        var resultDict1: NSDictionary?
        var resultDict2: NSDictionary?
        let callback: BindTarget.BinaryNSDictionaryNSDictionaryCallback = { value1, value2 in
            resultDict1 = value1
            resultDict2 = value2
            expecter.fulfill()
        }
        _ = try? binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>])
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict1, <%= dict0 %>)
        XCTAssertEqual(resultDict2, <%= dict1 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryNSDictionaryCallbackReturnsPrimitive() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryNSDictionaryCallbackWithPrimitiveReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultDict1: NSDictionary?
        var resultDict2: NSDictionary?
        let callback: BindTarget.BinaryNSDictionaryNSDictionaryCallback = { value1, value2 in
            resultDict1 = value1
            resultDict2 = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? Int {
            XCTAssertEqual(value, <%= index %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict1, <%= dict0 %>)
        XCTAssertEqual(resultDict2, <%= dict1 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryNSDictionaryCallbackReturnsNSArray() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryNSDictionaryCallbackWithNSArrayReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultDict1: NSDictionary?
        var resultDict2: NSDictionary?
        let callback: BindTarget.BinaryNSDictionaryNSDictionaryCallback = { value1, value2 in
            resultDict1 = value1
            resultDict2 = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSArray {
            XCTAssertEqual(value, <%= arr0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict1, <%= dict0 %>)
        XCTAssertEqual(resultDict2, <%= dict1 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryNSDictionaryNSDictionaryCallbackReturnsNSDictionary() throws {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryNSDictionaryNSDictionaryCallbackWithNSDictionaryReturn, as: "")
        let expecter = expectation(description: "callback")
        var resultDict1: NSDictionary?
        var resultDict2: NSDictionary?
        let callback: BindTarget.BinaryNSDictionaryNSDictionaryCallback = { value1, value2 in
            resultDict1 = value1
            resultDict2 = value2
            expecter.fulfill()
        }
        if let value = try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]) as? NSDictionary {
            XCTAssertEqual(value, <%= dict0 %>)
        } else {
            XCTFail("Expected a return value")
        }
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
        XCTAssertEqual(resultDict1, <%= dict0 %>)
        XCTAssertEqual(resultDict2, <%= dict1 %>)
    }

    func testBind<%= arity.name.capitalizingFirstLetter() %>WithBinaryCallbackThrows() {
        binder.bind(BindTarget.<%= arity.name %>WithBinaryCallbackThrows, as: "")
        let expecter = expectation(description: "callback")
        let callback: BindTarget.BinaryCallback = { value1, value2 in
            expecter.fulfill()
        }
        XCTAssertThrowsError(try binder.callable?.call(args: [<%= arities.takeAndMakeParamsWithCallable(count: index)%>]))
        wait(for: [expecter], timeout: 5)
        XCTAssert(binder.target.called)
    }
<%_     } -%>
<%_ } -%>
}

enum BindError: Error {
    case boundMethodThrew
}

class BindTarget {
    private(set) var called = false

    typealias UnaryCallback = (Int) -> Void
    typealias BinaryCallback = (Int, Int) -> Void
    typealias UnaryNSArrayCallback = (NSArray) -> Void
    typealias UnaryNSDictionaryCallback = (NSDictionary) -> Void
    typealias BinaryPrimitiveNSArrayCallback = (Int, NSArray) -> Void
    typealias BinaryPrimitiveNSDictionaryCallback = (Int, NSDictionary) -> Void
    typealias BinaryNSArrayPrimitiveCallback = (NSArray, Int) -> Void
    typealias BinaryNSArrayNSArrayCallback = (NSArray, NSArray) -> Void
    typealias BinaryNSArrayNSDictionaryCallback = (NSArray, NSDictionary) -> Void
    typealias BinaryNSDictionaryPrimitiveCallback = (NSDictionary, Int) -> Void
    typealias BinaryNSDictionaryNSArrayCallback = (NSDictionary, NSArray) -> Void
    typealias BinaryNSDictionaryNSDictionaryCallback = (NSDictionary, NSDictionary) -> Void
<%_  for (index, arity) in arities.enumerated() { -%>
<%_     if index == 0 { _%>
    func nullaryNoReturn() {
        called = true
    }

    func nullaryNoReturnThrows() throws {
        called = true
        throw BindError.boundMethodThrew
    }

    func nullaryWithReturn() -> String {
        called = true
        return "value"
    }

    func nullaryWithNSArrayReturn() -> NSArray {
        called = true
        return NSArray()
    }

    func nullaryWithNSDictionaryReturn() -> NSDictionary {
        called = true
        return NSDictionary()
    }

    func nullaryWithReturnThrows() throws -> String {
        called = true
        throw BindError.boundMethodThrew
    }
<%     } else { -%>

    func <%= arity.name %>NoReturn(<%= getCommaSeparatedString(count: index, formattingPurpose: .forMethodArgsAsIntDecl) %>) {
        called = true
    }

    func <%= arity.name %>NoReturnThrows(<%= getCommaSeparatedString(count: index, formattingPurpose: .forMethodArgsAsIntDecl) %>) throws {
        called = true
        throw BindError.boundMethodThrew
    }

    func <%= arity.name %>WithReturn(<%= getCommaSeparatedString(count: index, formattingPurpose: .forMethodArgsAsIntDecl) %>) -> Int {
        called = true
        return <%= getCommaSeparatedString(count: index, formattingPurpose: .forArgsSum)%>
    }

    func <%= arity.name %>WithReturnThrows(<%= getCommaSeparatedString(count: index, formattingPurpose: .forMethodArgsAsIntDecl) %>) throws -> Int {
        called = true
        throw BindError.boundMethodThrew
    }

    func <%= arity.name %>WithNSArrayReturn(<%= getCommaSeparatedString(count: index, formattingPurpose: .forMethodArgsAsIntDecl) %>) -> NSArray {
        called = true
        let arr: NSArray = [<%= getCommaSeparatedString(count: index, formattingPurpose: .forArgsSum) %>]
        return arr
    }

    func <%= arity.name %>WithNSDictionaryReturn(<%= getCommaSeparatedString(count: index, formattingPurpose: .forMethodArgsAsIntDecl) %>) -> NSDictionary {
        called = true
        let dict: NSDictionary = ["result": <%= getCommaSeparatedString(count: index, formattingPurpose: .forArgsSum) %>]
        return dict
    }

    func <%= arity.name %>WithUnaryCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping UnaryCallback) {
        called = true
        callback(<%= arities.getCallbackArgsForUnaryCallback(count: index) %>)
    }

    func <%= arity.name %>WithUnaryCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping UnaryCallback) -> Int {
        called = true
        callback(<%= arities.getCallbackArgsForUnaryCallback(count: index) %>)
        return <%= index %>
    }

    func <%= arity.name %>WithUnaryCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping UnaryCallback) -> NSArray {
        called = true
        callback(<%= arities.getCallbackArgsForUnaryCallback(count: index) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithUnaryCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping UnaryCallback) -> NSDictionary {
        called = true
        callback(<%= arities.getCallbackArgsForUnaryCallback(count: index) %>)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithUnaryCallbackThrows(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping UnaryCallback) throws {
        called = true
        callback(<%= arities.getCallbackArgsForUnaryCallback(count: index) %>)
        throw BindError.boundMethodThrew
    }

    func <%= arity.name %>WithUnaryNSArrayCallback(callback: @escaping UnaryNSArrayCallback) {
        called = true
        let arr: NSArray = <%= arr0 %>
        callback(arr)
    }

    func <%= arity.name %>WithUnaryNSArrayCallbackWithPrimitiveReturn(callback: @escaping UnaryNSArrayCallback) -> Int {
        called = true
        let arr: NSArray = <%= arr0 %>
        callback(arr)
        return <%= index %>
    }

    func <%= arity.name %>WithUnaryNSArrayCallbackWithNSArrayReturn(callback: @escaping UnaryNSArrayCallback) -> NSArray {
        called = true
        let arr: NSArray = <%= arr0 %>
        callback(arr)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithUnaryNSArrayCallbackWithNSDictionaryReturn(callback: @escaping UnaryNSArrayCallback) -> NSDictionary {
        called = true
        let arr: NSArray = <%= arr0 %>
        callback(arr)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithUnaryNSDictionaryCallback(callback: @escaping UnaryNSDictionaryCallback) {
        called = true
        let dict: NSDictionary = <%= dict0 %>
        callback(dict)
    }

    func <%= arity.name %>WithUnaryNSDictionaryCallbackWithPrimitiveReturn(callback: @escaping UnaryNSDictionaryCallback) -> Int {
        called = true
        let dict: NSDictionary = <%= dict0 %>
        callback(dict)
        return <%= index %>
    }

    func <%= arity.name %>WithUnaryNSDictionaryCallbackWithNSArrayReturn(callback: @escaping UnaryNSDictionaryCallback) -> NSArray {
        called = true
        let dict: NSDictionary = <%= dict0 %>
        callback(dict)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithUnaryNSDictionaryCallbackWithNSDictionaryReturn(callback: @escaping UnaryNSDictionaryCallback) -> NSDictionary {
        called = true
        let dict: NSDictionary = <%= dict0 %>
        callback(dict)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithBinaryCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryCallback) {
        called = true
        callback(<%= arities.getCallbackArgsForBinaryCallback(count: index) %>)
    }

    func <%= arity.name %>WithBinaryCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryCallback) -> Int {
        called = true
        callback(<%= arities.getCallbackArgsForBinaryCallback(count: index) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryCallback) -> NSArray {
        called = true
        callback(<%= arities.getCallbackArgsForBinaryCallback(count: index) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithBinaryCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryCallback) -> NSDictionary {
        called = true
        callback(<%= arities.getCallbackArgsForBinaryCallback(count: index) %>)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithBinaryPrimitiveNSArrayCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryPrimitiveNSArrayCallback) {
        called = true
        let arr1: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forPrimitiveNSArray) %>)
    }

    func <%= arity.name %>WithBinaryPrimitiveNSArrayCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryPrimitiveNSArrayCallback) -> Int {
        called = true
        let arr1: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forPrimitiveNSArray) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryPrimitiveNSArrayCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryPrimitiveNSArrayCallback) -> NSArray {
        called = true
        let arr1: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forPrimitiveNSArray) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithBinaryPrimitiveNSArrayCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryPrimitiveNSArrayCallback) -> NSDictionary {
        called = true
        let arr1: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forPrimitiveNSArray) %>)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithBinaryPrimitiveNSDictionaryCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryPrimitiveNSDictionaryCallback) {
        called = true
        let dict1: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forPrimitiveNSDictionary) %>)
    }

    func <%= arity.name %>WithBinaryPrimitiveNSDictionaryCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryPrimitiveNSDictionaryCallback) -> Int {
        called = true
        let dict1: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forPrimitiveNSDictionary) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryPrimitiveNSDictionaryCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryPrimitiveNSDictionaryCallback) -> NSArray {
        called = true
        let dict1: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forPrimitiveNSDictionary) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithBinaryPrimitiveNSDictionaryCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryPrimitiveNSDictionaryCallback) -> NSDictionary {
        called = true
        let dict1: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forPrimitiveNSDictionary) %>)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithBinaryNSArrayPrimitiveCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayPrimitiveCallback) {
        called = true
        let arr0: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayPrimitive) %>)
    }

    func <%= arity.name %>WithBinaryNSArrayPrimitiveCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayPrimitiveCallback) -> Int {
        called = true
        let arr0: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayPrimitive) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryNSArrayPrimitiveCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayPrimitiveCallback) -> NSArray {
        called = true
        let arr0: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayPrimitive) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithBinaryNSArrayPrimitiveCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayPrimitiveCallback) -> NSDictionary {
        called = true
        let arr0: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayPrimitive) %>)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithBinaryNSArrayNSArrayCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayNSArrayCallback) {
        called = true
        let arr0: NSArray = <%= arr0 %>
        let arr1: NSArray = <%= arr1 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayNSArray) %>)
    }

    func <%= arity.name %>WithBinaryNSArrayNSArrayCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayNSArrayCallback) -> Int {
        called = true
        let arr0: NSArray = <%= arr0 %>
        let arr1: NSArray = <%= arr1 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayNSArray) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryNSArrayNSArrayCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayNSArrayCallback) -> NSArray {
        called = true
        let arr0: NSArray = <%= arr0 %>
        let arr1: NSArray = <%= arr1 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayNSArray) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithBinaryNSArrayNSArrayCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayNSArrayCallback) -> NSDictionary {
        called = true
        let arr0: NSArray = <%= arr0 %>
        let arr1: NSArray = <%= arr1 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayNSArray) %>)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithBinaryNSArrayNSDictionaryCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayNSDictionaryCallback) {
        called = true
        let arr0: NSArray = <%= arr0 %>
        let dict1: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayNSDictionary) %>)
    }

    func <%= arity.name %>WithBinaryNSArrayNSDictionaryCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayNSDictionaryCallback) -> Int {
        called = true
        let arr0: NSArray = <%= arr0 %>
        let dict1: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayNSDictionary) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryNSArrayNSDictionaryCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayNSDictionaryCallback) -> NSArray {
        called = true
        let arr0: NSArray = <%= arr0 %>
        let dict1: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayNSDictionary) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithBinaryNSArrayNSDictionaryCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSArrayNSDictionaryCallback) -> NSDictionary {
        called = true
        let arr0: NSArray = <%= arr0 %>
        let dict1: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSArrayNSDictionary) %>)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithBinaryNSDictionaryPrimitiveCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryPrimitiveCallback) {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryPrimitive) %>)
    }

    func <%= arity.name %>WithBinaryNSDictionaryPrimitiveCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryPrimitiveCallback) -> Int {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryPrimitive) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryNSDictionaryPrimitiveCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryPrimitiveCallback) -> NSArray {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryPrimitive) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithBinaryNSDictionaryPrimitiveCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryPrimitiveCallback) -> NSDictionary {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryPrimitive) %>)
        return <%= dict0 %>
    }

    func <%= arity.name %>WithBinaryNSDictionaryNSArrayCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryNSArrayCallback) {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        let arr1: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryNSArray) %>)
    }

    func <%= arity.name %>WithBinaryNSDictionaryNSArrayCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryNSArrayCallback) -> Int {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        let arr1: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryNSArray) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryNSDictionaryNSArrayCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryNSArrayCallback) -> NSArray {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        let arr1: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryNSArray) %>)
        return <%= arr0%>
    }

    func <%= arity.name %>WithBinaryNSDictionaryNSArrayCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryNSArrayCallback) -> NSDictionary {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        let arr1: NSArray = <%= arr0 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryNSArray) %>)
        return <%= dict0%>
    }

    func <%= arity.name %>WithBinaryNSDictionaryNSDictionaryCallback(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryNSDictionaryCallback) {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        let dict1: NSDictionary = <%= dict1 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryNSDictionary) %>)
    }

    func <%= arity.name %>WithBinaryNSDictionaryNSDictionaryCallbackWithPrimitiveReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryNSDictionaryCallback) -> Int {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        let dict1: NSDictionary = <%= dict1 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryNSDictionary) %>)
        return <%= index%>
    }

    func <%= arity.name %>WithBinaryNSDictionaryNSDictionaryCallbackWithNSDictionaryReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryNSDictionaryCallback) -> NSDictionary {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        let dict1: NSDictionary = <%= dict1 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryNSDictionary) %>)
        return <%= dict0%>
    }

    func <%= arity.name %>WithBinaryNSDictionaryNSDictionaryCallbackWithNSArrayReturn(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryNSDictionaryNSDictionaryCallback) -> NSArray {
        called = true
        let dict0: NSDictionary = <%= dict0 %>
        let dict1: NSDictionary = <%= dict1 %>
        callback(<%= arities.getCallbackArgsForBinaryCallbackWithFoundation(count: index, formattingPurpose: .forNSDictionaryNSDictionary) %>)
        return <%= arr0 %>
    }

    func <%= arity.name %>WithBinaryCallbackThrows(<% if index > 1 { %><%= getCommaSeparatedString(count: index - 1, formattingPurpose: .forMethodArgsAsIntDecl) %>, <% } %>callback: @escaping BinaryCallback) throws {
        called = true
        callback(<%= arities.getCallbackArgsForBinaryCallback(count: index) %>)
        throw BindError.boundMethodThrew
    }
<%      } -%>
<%  } -%>
}

class TestBinder: Binder {
    typealias Target = BindTarget
    let target = BindTarget()

    init() {}

    func bind(_ callable: Callable, as name: String) {
        self.callable = callable
    }

    public var callable: Callable?
}
