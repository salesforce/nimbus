# tip: you can test circleci configs locally https://circleci.com/docs/2.0/local-cli/

version: 2
jobs:
  build-and-test-macos:
    macos:
      xcode: "10.1.0"

    shell: /bin/bash --login -eo pipefail

    steps:
      - checkout

      - run:
          name: Build nimbus-bridge
          command: |
            npm install

      - run:
          name: Set Ruby Version
          command: echo "ruby-2.5.3" > ~/.ruby-version

      - restore_cache:
          keys:
            - v1-pods-{{ checksum "platforms/apple/Podfile.lock" }}
            - v1-pods

      - restore_cache:
          keys:
            - v1-bundler-{{ checksum "platforms/apple/Gemfile.lock" }}
            - v1-bundler

      - run:
          name: CocoaPods
          working_directory: platforms/apple
          command: |
            gem install bundler -v 2.0.1
            bundle install
            bundle exec pod install

      - save_cache:
          paths:
            - ./platforms/apple/Pods
          key: v1-pods-{{ checksum "platforms/apple/Podfile.lock" }}

      - save_cache:
          paths:
            - ./platforms/apple/.bundle
          key: v1-bundler-{{ checksum "platforms/apple/Gemfile.lock" }}

      - run:
          name: Build macOS
          working_directory: platforms/apple
          command: xcodebuild build -workspace Nimbus.xcworkspace -scheme NimbusDesktop -configuration Debug -sdk macosx

      - run:
          name: Ensure generated code is up-to-date
          working_directory: platforms/apple
          command: |
            xcodebuild build -workspace Nimbus.xcworkspace -scheme 'Generate Code from Templates'
            git diff-index --quiet HEAD

  build-swiftpm:
    macos:
      xcode: "11.2.1"

    shell: /bin/bash --login -eo pipefail

    steps:
      - checkout
      - run:
          name: Build Swift Package
          command: swift build

  build-and-test-ios:
    macos:
      xcode: "10.1.0"

    shell: /bin/bash --login -eo pipefail

    steps:
      - checkout

      - run:
          name: Prime Simulator
          command: xcrun instruments -w "iPhone 7 (12.1) [" || true

      - run:
          name: Build nimbus-bridge
          command: |
            npm install

      - run:
          name: Set Ruby Version
          command: echo "ruby-2.5.3" > ~/.ruby-version

      - restore_cache:
          keys:
            - v1-pods-{{ checksum "platforms/apple/Podfile.lock" }}
            - v1-pods

      - restore_cache:
          keys:
            - v1-bundler-{{ checksum "platforms/apple/Gemfile.lock" }}
            - v1-bundler

      - run:
          name: CocoaPods
          working_directory: platforms/apple
          command: |
            gem install bundler -v 2.0.1
            bundle install --path .bundle
            bundle exec pod install

      - save_cache:
          paths:
            - ./platforms/apple/Pods
          key: v1-pods-{{ checksum "platforms/apple/Podfile.lock" }}

      - save_cache:
          paths:
            - ./platforms/apple/.bundle
          key: v1-bundler-{{ checksum "platforms/apple/Gemfile.lock" }}

      - run:
          name: Build iOS
          working_directory: platforms/apple
          command: xcodebuild build -workspace Nimbus.xcworkspace -scheme Nimbus -configuration Debug -sdk iphonesimulator -derivedDataPath build/Debug -destination 'OS=12.1,platform=iOS Simulator,name=iPhone 7'

      - run:
          name: Test iOS
          working_directory: platforms/apple
          command: xcodebuild test -workspace Nimbus.xcworkspace -scheme Nimbus -configuration Debug -sdk iphonesimulator -derivedDataPath build/Debug -destination 'OS=12.1,platform=iOS Simulator,name=iPhone 7' -enableCodeCoverage YES

      - run:
          name: Lint CocoaPod Spec
          working_directory: platforms/apple
          command: bundle exec pod lib lint --private ../../Nimbus.podspec

      - run:
          name: Get code coverage
          working_directory: platforms/apple
          command: |
            bundle exec slather coverage -x -b build/Debug --scheme Nimbus ./Nimbus.xcodeproj/
            bash <(curl -s https://codecov.io/bash) -f ./cobertura.xml -X coveragepy -X gcov -X xcode

      - run:
          name: Build NimbusJS
          command: |
            npm install
            ./create-nimbus-js.sh

      - persist_to_workspace:
          root: .
          paths:
            - NimbusJS.zip

  create-tagged-release:
    docker:
      - image: cibuilds/github:0.10

    steps:
      - attach_workspace:
          at: workspace

      - run:
          name: "Create GitHub Release"
          command: |
            ghr -t ${HYPE_GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ./workspace/NimbusJS.zip

  build-and-test-android:
    docker:
      - image: circleci/android:api-29-node

    steps:
      - checkout

      - run:
          name: Build Android
          working_directory: platforms/android
          command: ./gradlew assembleDebug

      - run:
          name: Test Android
          working_directory: platforms/android
          command: ./gradlew testDebugUnitTest

      - run:
          name: Lint Android
          working_directory: platforms/android
          command: ./gradlew ktlint

      - store_artifacts:
          path: platforms/android/nimbus/build/reports
          destination: reports

      - store_test_results:
          path: platforms/android/nimbus/build/test-results

      - run:
          name: Codecov Android
          working_directory: platforms/android
          command: |
            ./gradlew jacocoTestReport
            bash <(curl -s https://codecov.io/bash)

  build-and-test-ts:
    docker:
      - image: circleci/node:10

    steps:
      - checkout
      - run:
          name: Build and Lint Typescript
          command: |
            npm install
            npm run lint -- -- -f junit -o ~/reports/eslint.xml
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports

workflows:
  version: 2
  build-and-test:
    jobs:
      - build-and-test-ios
      - build-and-test-macos
      - build-swiftpm
      - build-and-test-android
      - build-and-test-ts
      - create-tagged-release:
          requires:
            - build-and-test-ios
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
