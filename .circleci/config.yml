# tip: you can test circleci configs locally https://circleci.com/docs/2.0/local-cli/

version: 2
jobs:
  build-and-test-macos:
    macos:
      xcode: "11.3.1"

    shell: /bin/bash --login -eo pipefail

    steps:
      - checkout

      - run:
          name: Build nimbus-bridge
          command: |
            npm install

      - restore_cache:
          keys:
            - v1-pods-{{ checksum "platforms/apple/Podfile.lock" }}
            - v1-pods

      - restore_cache:
          keys:
            - v1-bundler-{{ checksum "platforms/apple/Gemfile.lock" }}
            - v1-bundler

      - run:
          name: CocoaPods
          working_directory: platforms/apple
          command: |
            bundle install
            bundle exec pod install

      - save_cache:
          paths:
            - ./platforms/apple/Pods
          key: v1-pods-{{ checksum "platforms/apple/Podfile.lock" }}

      - save_cache:
          paths:
            - ./platforms/apple/.bundle
          key: v1-bundler-{{ checksum "platforms/apple/Gemfile.lock" }}

      - run:
          name: Build macOS
          working_directory: platforms/apple
          command: xcodebuild build -workspace Nimbus.xcworkspace -scheme NimbusDesktop -configuration Debug -sdk macosx

  build-swiftpm:
    macos:
      xcode: "11.3.1"

    shell: /bin/bash --login -eo pipefail

    steps:
      - checkout
      - run:
          name: Build Swift Package
          command: swift build

  build-and-test-ios:
    macos:
      xcode: "11.3.1"

    shell: /bin/bash --login -eo pipefail

    steps:
      - checkout

      - run:
          name: Prime Simulator
          command: xcrun instruments -w "iPhone 7 (12.4) [" || true

      - run:
          name: Build nimbus-bridge
          command: |
            npm install

      - restore_cache:
          keys:
            - v1-pods-{{ checksum "platforms/apple/Podfile.lock" }}
            - v1-pods

      - restore_cache:
          keys:
            - v1-bundler-{{ checksum "platforms/apple/Gemfile.lock" }}
            - v1-bundler

      - run:
          name: CocoaPods
          working_directory: platforms/apple
          command: |
            bundle install
            bundle exec pod install

      - save_cache:
          paths:
            - ./platforms/apple/Pods
          key: v1-pods-{{ checksum "platforms/apple/Podfile.lock" }}

      - save_cache:
          paths:
            - ./platforms/apple/.bundle
          key: v1-bundler-{{ checksum "platforms/apple/Gemfile.lock" }}

      - run:
          name: Build iOS
          working_directory: platforms/apple
          command: xcodebuild build -workspace Nimbus.xcworkspace -scheme Nimbus -configuration Debug -sdk iphonesimulator -derivedDataPath build/Debug -destination 'OS=12.4,platform=iOS Simulator,name=iPhone 7'

      - run:
          name: Test iOS
          working_directory: platforms/apple
          command: xcodebuild test -workspace Nimbus.xcworkspace -scheme Nimbus -configuration Debug -sdk iphonesimulator -derivedDataPath build/Debug -destination 'OS=12.4,platform=iOS Simulator,name=iPhone 7' -enableCodeCoverage YES

      - run:
          name: Lint CocoaPod Spec
          working_directory: platforms/apple
          command: bundle exec pod lib lint --allow-warnings --private ../../NimbusBridge.podspec

      - run:
          name: Get code coverage
          working_directory: platforms/apple
          command: |
            bundle exec slather coverage -x -b build/Debug --scheme Nimbus ./Nimbus.xcodeproj/

      - run:
          name: Build iOS Demo app
          working_directory: platforms/apple
          command: xcodebuild build -workspace Nimbus.xcworkspace -scheme NimbusApp -configuration Debug -sdk iphonesimulator -derivedDataPath build/Debug -destination 'OS=12.4,platform=iOS Simulator,name=iPhone 7'

      - run:
          name: SwiftFormat
          working_directory: platforms/apple
          when: always
          command: ./Pods/SwiftFormat/CommandLineTool/swiftformat --lint .

      - run:
          name: SwiftLint
          working_directory: platforms/apple
          when: always
          command: ./Pods/SwiftLint/swiftlint lint --path Sources

      - run:
          name: Build NimbusJS
          command: |
            npm install
            ./create-nimbus-js.sh

      - run:
          name: Build Swift Docs
          working_directory: platforms/apple
          command: |
            bundle exec jazzy

      - persist_to_workspace:
          root: .
          paths:
            - NimbusJS.zip
            - platforms/apple/cobertura.xml
            - platforms/apple/.build/docs

  create-tagged-release:
    docker:
      - image: circleci/node:10

    steps:
      - attach_workspace:
          at: workspace

      - run:
          name: "Install node github release CLI"
          command: |
            sudo npm install -g github-release-cli

      - run:
          name: "Create GitHub Release"
          command: |
            github-release upload -T ${HYPE_GITHUB_TOKEN} -o ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n ${CIRCLE_TAG} -t ${CIRCLE_TAG} ./workspace/NimbusJS.zip

  build-and-test-android:
    docker:
      - image: circleci/android:api-29-node

    resource_class: medium+

    environment:

      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"

    steps:
      - checkout

      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json

      - run:
          name: Build Android
          working_directory: platforms/android
          command: ./gradlew -PpreDexEnable=false assembleDebug assembleAndroidTest

      - run:
          name: Test Android
          working_directory: platforms/android
          command: ./gradlew testDebugUnitTest

      - run:
          name: Authorize gcloud and set config defaults
          command: |
            sudo gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            sudo gcloud --quiet config set project ${GOOGLE_PROJECT_ID}

      - run:
          name: Instrumentation Tests with Firebase Test Lab
          working_directory: platforms/android
          command: |
            sudo gcloud firebase test android run \
              --app demo-app/build/outputs/apk/debug/demo-app-debug.apk \
              --test shared-tests/build/outputs/apk/androidTest/debug/shared-tests-debug-androidTest.apk \
              --results-bucket cloud-test-${GOOGLE_PROJECT_ID}

      - run:
          name: Lint Android
          working_directory: platforms/android
          command: ./gradlew ktlint

      - run:
          name: Build Kotlin Docs
          working_directory: platforms/android
          command: ./gradlew dokka

      - store_artifacts:
          path: platforms/android/shared-tests/build/reports
          destination: reports

      - store_test_results:
          path: platforms/android/bridge-webview/build/test-results

      - store_test_results:
          path: platforms/android/bridge-v8/build/test-results

      - run:
          name: Codecov Android
          working_directory: platforms/android
          command: |
            ./gradlew jacocoTestReport

      - persist_to_workspace:
          root: .
          paths:
            - platforms/android/bridge-webview/build/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml
            - platforms/android/bridge-v8/build/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml
            - platforms/android/bridge-webview/build/dokka
            - platforms/android/bridge-v8/build/dokka
            - platforms/android/core/build/dokka
            - platforms/android/k2v8/build/dokka

  build-and-test-ts:
    docker:
      - image: circleci/node:10

    steps:
      - checkout
      - run:
          name: Build and Lint Typescript
          command: |
            npm install
            npm run lint -- -- -f junit -o ~/reports/eslint.xml
      - run:
          name: Build Docs
          working_directory: packages/nimbus-bridge
          command: npm run build-docs
      - persist_to_workspace:
          root: .
          paths:
            - packages/nimbus-bridge/dist/typedoc
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports

  upload-coverage:
    docker:
      - image: circleci/android:api-29-node

    steps:
      - checkout

      - attach_workspace:
          at: workspace

      - run:
          name: Upload iOS coverage
          command: |
            bash <(curl -s https://codecov.io/bash) -f ./workspace/platforms/apple/cobertura.xml -X coveragepy -X gcov -X xcode -F iOS

      - run:
          name: Upload Android coverage
          command: |
            bash <(curl -s https://codecov.io/bash) -f ./workspace/platforms/android/bridge-webview/build/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml -f ./workspace/platforms/android/bridge-v8/build/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml -F Android

  upload-android-release:
    docker:
      - image: circleci/android:api-29-node

    steps:
      - checkout

      - run:
          name: Build and upload Android distribution binaries to Bintray
          working_directory: platforms/android
          command: |
            ./gradlew bintrayUpload

  build-docs:
    docker:
      - image: circleci/node:10

    steps:
      - checkout
      - attach_workspace:
          at: ./doc-build
      - run:
          name: Build Docs
          working_directory: docs
          command: |
            npm install
            npm run build -- --pathprefix='/nimbus'
      - run:
          name: Assemble Doc Fragments
          command: |
            mkdir -p docs/dist/docs/api
            mv doc-build/platforms/android/bridge-webview/build/dokka docs/dist/docs/api/android/bridge-webview
            mv doc-build/platforms/android/bridge-v8/build/dokka docs/dist/docs/api/android/bridge-v8
            mv doc-build/platforms/android/core/build/dokka docs/dist/docs/api/android/core
            mv doc-build/platforms/android/k2v8/build/dokka docs/dist/docs/api/android/k2v8
            mv doc-build/platforms/apple/.build/docs docs/dist/docs/api/apple
            mv doc-build/packages/nimbus-bridge/dist/typedoc docs/dist/docs/api/ts
      - persist_to_workspace:
          root: .
          paths:
            - docs/dist

  publish-docs:
    docker:
      - image: circleci/node:10

    steps:
      - checkout
      - attach_workspace:
          at: ./doc-build
      - run:
          name: Publish Docs
          working_directory: docs
          command: |
            npm install
            npx gh-pages \
              -d ../doc-build/docs/dist \
              -r https://hype-bot:${HYPE_GITHUB_TOKEN}@github.com/salesforce/nimbus.git \
              -u "Hype Bot <hybridplatform@salesforce.com>" \
              -m "[skip ci] Update docs" \
              --no-history

workflows:
  version: 2
  create-release-from-tag:
    jobs:
      - build-and-test-ios:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - build-and-test-android:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - create-tagged-release:
          requires:
            - build-and-test-ios
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/
      - upload-android-release:
          requires:
            - build-and-test-android
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\d+\.\d+\.\d+$/

  build-and-test:
    jobs:
      - build-and-test-ios
      - build-and-test-macos
      - build-swiftpm
      - build-and-test-android
      - build-and-test-ts
      - build-docs:
          requires:
            - build-and-test-ts
            - build-and-test-ios
            - build-and-test-android
      - publish-docs:
          requires:
            - build-docs
          filters:
            branches:
              only:
                - master
      - upload-coverage:
          requires:
            - build-and-test-ios
            - build-and-test-android
